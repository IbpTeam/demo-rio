This package is a simple RPC framework for WebDE.
The IPC is depend on third party moudles based on running platform, dbus on Linux for example.
The cross device communication is depend on a deamon process called commdaemon which provides peer-to-peer communication service.

To implement ipc your own, you should realize interfaces called invoke and notify of IPC at least just like ipc-dbus.js done.

Interface definition:
{
  package: package's name [optional] -> String
  service: service's name -> String
  path: object's path [optional] -> String
  remote: service for remote device or not, defalut is "false" -> String: "true"/"false"
  interfaces: [
    {
      name: interface name -> String
      in: [type of perameters -> String] -> Array
    } -> Object
  ] -> Array
}

When finish define your interface, use generator.js under tools to get correponding Proxy and Stub.
e.g. nodejs generator.js $your_interface_file

Service package is like:
some_service/
    |-------interface/   --> cantains proxy/stub generated by generator.js
    |-------implements/  --> cantians real implements for this service
    |-------package.json --> description for this package

After create a new service, you could use installer.js which is also under tools to register this service to WebDE.
And then you can use testAPI/testRPC/startService.sh to start this service for some test.
