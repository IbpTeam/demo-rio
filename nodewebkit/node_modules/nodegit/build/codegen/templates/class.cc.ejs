<%
  function isV8Value(cppClassName) {
    return ["Boolean", "Number", "String", "Integer", "Int32", "Uint32", "Date", "Function"].indexOf(cppClassName) > -1;
  }

  function cppClassName2v8ValueClassName(cppClassName) {
    if (isV8Value(cppClassName))
      return cppClassName;
    else
      return 'Object';
  }

  function isPointer(cType) {
    return /\s*\*\s*$/.test(cType);
  }

  function unPointer(cType) {
    return cType.replace(/\s*\*\s*$/,'');
  }

  function defaultValue(cType) {
    if (cType === 'git_otype') { return 'GIT_OBJ_ANY'; }
    else { return '0'; }
  }
-%>
/**
 * This code is auto-generated; unless you know what you're doing, do not modify!
 **/
#include <nan.h>
#include <string.h>

#include "git2.h"

#include "../include/functions/copy.h"

#include "../include/<%= filename %>"
<% if (typeof dependencies != 'undefined') { -%>
<% for (d in dependencies) { -%>
#include "<%- dependencies[d] %>"
<% } -%>
<% } -%>

using namespace v8;
using namespace node;

<% if (typeof cType != 'undefined') { -%>
<%- cppClassName %>::<%- cppClassName %>(<%- cType %> *raw) {
  this->raw = raw;
}

<%- cppClassName %>::~<%- cppClassName %>() {
<% if (typeof freeFunctionName != 'undefined') { -%>
  <%- freeFunctionName %>(this->raw);
<% } -%>
}

void <%- cppClassName %>::Initialize(Handle<v8::Object> target) {
  NanScope();

  Local<FunctionTemplate> tpl = NanNew<FunctionTemplate>(New);

  tpl->InstanceTemplate()->SetInternalFieldCount(1);
  tpl->SetClassName(NanNew<String>("<%- jsClassName %>"));

<% if (typeof functions != 'undefined') { -%>
<%
  for (var i in functions) {
    var functionInfo = functions[i];
    if (functionInfo.ignore) continue;
-%>
<% if (functionInfo.isPrototypeMethod) { -%>
  NODE_SET_PROTOTYPE_METHOD(tpl, "<%- functionInfo.jsFunctionName %>", <%- functionInfo.cppFunctionName %>);
<% } else { -%>
  NODE_SET_METHOD(tpl, "<%- functionInfo.jsFunctionName %>", <%- functionInfo.cppFunctionName %>);
<% } -%>
<% } -%>
<% } -%>

<% if (typeof fields != 'undefined') { -%>
<%
  for (var i in fields) {
    var fieldInfo = fields[i];
    if (fieldInfo.ignore) continue;
-%>
  NODE_SET_PROTOTYPE_METHOD(tpl, "<%- fieldInfo.jsFunctionName %>", <%- fieldInfo.cppFunctionName %>);
<% } -%>
<% } -%>

  Local<Function> _constructor_template = tpl->GetFunction();
  NanAssignPersistent(constructor_template, _constructor_template);
  target->Set(NanNew<String>("<%- jsClassName %>"), _constructor_template);
}

NAN_METHOD(<%- cppClassName %>::New) {
  NanScope();

  if (args.Length() == 0 || !args[0]->IsExternal()) {
    return NanThrowError("<%= cType %> is required.");
  }
  <%- cppClassName %>* object = new <%- cppClassName %>(static_cast<<%= cType%> *>(Handle<External>::Cast(args[0])->Value()));
  object->Wrap(args.This());

  NanReturnValue(args.This());
}

Handle<Value> <%- cppClassName %>::New(void *raw) {
  NanEscapableScope();
  Handle<Value> argv[1] = { NanNew<External>((void *)raw) };
  return NanEscapeScope(NanNew<Function>(<%- cppClassName %>::constructor_template)->NewInstance(1, argv));
}

<%- cType %> *<%- cppClassName %>::GetValue() {
  return this->raw;
}
<% } else { -%>
void <%- cppClassName %>::Initialize(Handle<v8::Object> target) {
  NanScope();

  Local<Object> object = NanNew<Object>();

<% if (typeof functions != 'undefined') { -%>
<%
  for (var i in functions) {
    var functionInfo = functions[i];
    if (functionInfo.ignore) continue;
-%>
  NODE_SET_METHOD(object, "<%- functionInfo.jsFunctionName %>", <%- functionInfo.cppFunctionName %>);
<% } -%>
<% } -%>

  target->Set(NanNew<String>("<%- jsClassName %>"), object);
}
<% } -%>

<% if (typeof functions != 'undefined') { -%>
<%
  for (var i in functions) {
    var functionInfo = functions[i];
    if (functionInfo.ignore) continue;

    var returns = [];
    for (var i = 0; i < functionInfo.args.length; i++) {
      var arg = functionInfo.args[i];
      if (arg.isReturn) returns.push(arg);
    }
    if (!returns.length && !functionInfo.return.isErrorCode && functionInfo.return.cType != "void") returns.push(functionInfo.return);
-%>

<% if (functionInfo.isAsync) { -%>
<% include build/codegen/templates/asyncFunction.cc.ejs -%>
<% } else { -%>
<% include build/codegen/templates/syncFunction.cc.ejs -%>
<% } -%>
<% } -%>
<% } -%>
<% include build/codegen/templates/fields.cc.ejs -%>

<% if (typeof cType != 'undefined') { -%>
Persistent<Function> <%- cppClassName %>::constructor_template;
<% } -%>
