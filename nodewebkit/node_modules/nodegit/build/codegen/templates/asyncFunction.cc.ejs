#include "../include/functions/copy.h"

/**
<% include doc.cc.ejs -%>
 */
NAN_METHOD(<%- cppClassName %>::<%- functionInfo.cppFunctionName %>) {
  NanScope();
  <% var jsArg; -%>
  <% include guardArguments.cc.ejs -%>

  if (args.Length() == <%- jsArg %> || !args[<%- jsArg %>]->IsFunction()) {
    return NanThrowError("Callback is required and must be a Function.");
  }

  <%- functionInfo.cppFunctionName %>Baton* baton = new <%- functionInfo.cppFunctionName %>Baton;
  baton->error_code = GIT_OK;
  baton->error = NULL;
<%
    for (var cArg = 0, jsArg = 0; cArg < functionInfo.args.length; cArg++) {
      var arg = functionInfo.args[cArg];
-%>
<% if (!arg.isReturn) { -%>
<% if (arg.isSelf) { -%>
  baton-><%- arg.name %> = ObjectWrap::Unwrap<<%- cppClassName %>>(args.This())->GetValue();
<% } else { -%>
  <% include convertFromV8.cc.ejs -%>
  <% if (!arg.isPayload) { -%>
  baton-><%- arg.name %> = from_<%- arg.name %>;
  <% } -%>
<% } -%>
<% if (!(arg.isReturn || arg.isSelf || arg.isPayload)) jsArg++; -%>
<% } else { -%>
<% if (arg.shouldAlloc) { -%>
  baton-><%- arg.name %> = (<%- arg.cType %>)malloc(sizeof(<%- arg.cType.replace('*', '') %>));
<% } -%>
<% } -%>
<% } -%>

  NanCallback *callback = new NanCallback(Local<Function>::Cast(args[<%- jsArg %>]));
  <%- functionInfo.cppFunctionName %>Worker *worker = new <%- functionInfo.cppFunctionName %>Worker(baton, callback);
<%
    for (var cArg = 0, jsArg = 0; cArg < functionInfo.args.length; cArg++) {
      var arg = functionInfo.args[cArg];
-%>
<% if (!arg.isReturn) { -%>
<% if (arg.isSelf) { -%>
  worker->SaveToPersistent("<%- arg.name %>", args.This());
<% } else { -%>
  if (!args[<%- jsArg %>]->IsUndefined() && !args[<%- jsArg %>]->IsNull())
    worker->SaveToPersistent("<%- arg.name %>", args[<%- jsArg %>]->ToObject());
<% } -%>
<% if (!(arg.isReturn || arg.isSelf || arg.isPayload)) jsArg++; -%>
<% } -%>
<% } -%>

  NanAsyncQueueWorker(worker);
  NanReturnUndefined();
}

void <%- cppClassName %>::<%- functionInfo.cppFunctionName %>Worker::Execute() {
  <% if (functionInfo.return.cType != "void" || functionInfo.return.isErrorCode) { %><%- functionInfo.return.cType %> result = <% } %><%- functionInfo.cFunctionName %>(
<%
  for (var i = 0; i < functionInfo.args.length; i++) {
    var arg = functionInfo.args[i];
-%>
    <% if (arg.isReturn && /\*\*/.test(arg.cType)) { %>&<% } %>baton-><%- arg.name %><% if (i < functionInfo.args.length - 1) { %>, <% } %>
<% } -%>
  );
<% if (functionInfo.return.isErrorCode) { -%>
  baton->error_code = result;
  if (result != GIT_OK && giterr_last() != NULL) {
    baton->error = git_error_dup(giterr_last());
  }
<% } else if (functionInfo.return.cType != "void") { -%>
  baton->result = result;
<% } -%>
}

void <%- cppClassName %>::<%- functionInfo.cppFunctionName %>Worker::HandleOKCallback() {
  TryCatch try_catch;
  if (baton->error_code == GIT_OK) {
<% if (!returns.length) { -%>
    Handle<Value> result = NanUndefined();
<% } else if (returns.length == 1) { -%>
<% var to = {}; to.__proto__ = returns[0]; to.name = "baton->" + to.name; -%>
  Handle<Value> to;
  <% include convertToV8.cc.ejs -%>
  Handle<Value> result = to;
<% } else { -%>
  Handle<Object> result = NanNew<Object>();
  Handle<Value> to;
<%
  for (r in returns) {
    var to = returns[r];
-%>
    <% include convertToV8.cc.ejs -%>
    result->Set(NanNew<String>("<%- to.jsName || to.name %>"), to);
<% } -%>
<% } -%>
    Handle<Value> argv[2] = {
      NanNull(),
      result
    };
    callback->Call(2, argv);
  } else {
    if (baton->error) {
      Handle<Value> argv[1] = {
        NanError(baton->error->message)
      };
      callback->Call(1, argv);
      if (baton->error->message)
        free((void *)baton->error->message);
      free((void *)baton->error);
    } else {
      callback->Call(0, NULL);
    }
    <%
        for (var i = 0; i < functionInfo.args.length; i++) {
          var arg = functionInfo.args[i];
          if (!arg.shouldAlloc) continue;
    -%>
    free(baton-><%= arg.name %>);
    <% } -%>
  }

  if (try_catch.HasCaught()) {
    node::FatalException(try_catch);
  }
<%
    for (var i = 0; i < functionInfo.args.length; i++) {
      var arg = functionInfo.args[i];
-%>
<% if (['String', 'Array'].indexOf(arg.cppClassName) > -1) { -%>
<% if (arg.freeFunctionName) { %>
  <%- arg.freeFunctionName %>(baton-><%- arg.name %>);
<% } else { -%>
  free((void *)baton-><%- arg.name %>);
<% } -%>
<% } -%>
<% } -%>
  delete baton;
}
