{
  "name": "scan-fs",
  "description": "Scans the file system.",
  "keywords": [
    "scan-fs",
    "scan file",
    "scan directory",
    "scan fs",
    "directory",
    "file system"
  ],
  "version": "0.0.4",
  "homepage": "https://github.com/openlg/scan-fs",
  "authors": [
    {
      "name": "openlg",
      "email": "lirufei0808@gmail.com"
    }
  ],
  "main": "./scan-fs.js",
  "dependencies": {
    "path-filters": "1.0.x"
  },
  "scripts": {
    "test": "./testScanFS.js `pwd`"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/openlg/scan-fs"
  },
  "author": {
    "name": "lg"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/openlg/scan-fs/issues"
  },
  "readme": "scan-fs\n=======\n\n##目的(Purpose)\nScans the file system in nodejs.\n\n\n在nodejs环境下扫描文件系统的工具。\n\n##安装(Install)\n<pre>\n  npm install scan-fs\n</pre>\n\n##创建(Create)\n<pre>\n  var scanFS = require('scan-fs').create();\n</pre>\n\n###添加不需要扫描的目录或文件:\n`scanFS.exclude(filters)`: filters可以为正则表达式、Function和带`*`的字符串，当然也可以为它们组成的数组。\n\n###事件(Events)，按照事件触发顺序排序:\n* `error` - 发生错误时触发的事件。一个参数：err\n* `path` - 扫描到每一个路径都会触发这个事件。两个参数：path, eOpts。eOpts对象包含path(路径)、stat(`fs.Stats`)、parent(所在目录)。\n* `root` - 扫描到跟时触发的事件。两个参数：path, eOpts。eOpts对象包含path(路径)、stat(`fs.Stats`)、parent(所在目录)。\n* `file` - 扫描到文件时触发的事件。两个参数：filename, eOpts。eOpts对象包含path(路径)、stat(`fs.Stats`)、parent(所在目录)\n* `directory` - 扫描到目录时触发的事件。两个参数：path, eOpts。eOpts对象包含path(路径)、stat(`fs.Stats`)、parent(所在目录)。\n* `complete` - 扫描完成时触发的事件。两个参数：fileCount、dirCount。扫描到文件的总数和目录的总数。\n\n###添加事件方法:\n* `scanFS.listeners(object)` - object必须，返回scanFS对象。\n<pre>\n\tscanFS.listeners({\n\t\t'err': function(err){\n\t\t\t//...\n\t\t},\n\t\t'path': function(err){\n\t\t\t//...\n\t\t}\n\t\t//...\n\t});\n</pre>\n* 调用方法添加处理事件`onError`、`onPath`、`onRoot`、`onFile`、`onDirectory`、`onComplete`\n<pre>\n\tscanFS.onError(function(err){\n\t\t//...\n\t}).onPath(function(path, eOpts){\n\t\t//...\n\t}).onFile(function(filePath, eOpts){\n\t\t//...\n\t})\n\t//...\n</pre>\n\n例子(Example)：\n-----\n```js\nvar scanFS = require('scan-fs' ).create();\n//scanFS.exclude(__filename);\n//scanFS.exclude(/dir.*/);\nscanFS.exclude('*dir*');\n/*scanFS.exclude(['*index.js']);\n scanFS.exclude(/.*index.js$/);\n scanFS.exclude(new RegExp(/.*index.js$/));*/\n\nscanFS.listeners({\n\t'file': function(filePath, eOpts){\n\t\tconsole.log('File: ' + filePath);\n\t},\n\t'directory': function(path, eOpts){\n\t\tconsole.log('Directory: ' + path);\n\t},\n\t'error': function(err){\n\t\tconsole.log('err:' , err);\n\t},\n\t'complete': function(fileCount, dirCount){\n\t\tconsole.log('complete: ' + fileCount + ' files, ' + dirCount + ' directory')\n\t},\n\t'root': function(path, eOpts){\n\t\tconsole.log('root: ' + path);\n\t},\n\t'path': function(path, eOpts){\n\t\tconsole.log('path: ' + path);\n\t}\n\t}).setRecursive(true).scan('/home/lg/workspace/nodejs');\n```\n",
  "readmeFilename": "README.md",
  "_id": "scan-fs@0.0.4",
  "dist": {
    "shasum": "8d072c62ac61109ffcb9923d4c801d197ae24dfb",
    "tarball": "http://registry.npmjs.org/scan-fs/-/scan-fs-0.0.4.tgz"
  },
  "_from": "scan-fs@",
  "_npmVersion": "1.3.5",
  "_npmUser": {
    "name": "openlg",
    "email": "lirufei0808@gmail.com"
  },
  "maintainers": [
    {
      "name": "openlg",
      "email": "lirufei0808@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "8d072c62ac61109ffcb9923d4c801d197ae24dfb",
  "_resolved": "https://registry.npmjs.org/scan-fs/-/scan-fs-0.0.4.tgz"
}
