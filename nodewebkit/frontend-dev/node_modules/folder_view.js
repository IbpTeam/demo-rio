var events = require('events');
var util = require('util');
//var mime = require('mime');
//var netcomm = require('/home/cos/Templates/demo-rio/nodewebkit/backend/apilocalHandle.js');

//var fs = require('fs');
//eval(fs.readFileSync('../backend/api.js')+'');
//eval(fs.readFileSync('../backend/apiHttpHandle.js')+'');
var frontend_local = 'Nodejs';
function browser(){
    var ua = window.navigator.userAgent, ret = "";
    console.log('ua', ua);
    if(/Nodejs/g.test(ua)){
        ua = ua.split(" ");
        ret = frontend_local + "|"+ua[ua.length-1].split("/")[1];
    }
    else if(/Firefox/g.test(ua)){
        ua = ua.split(" ");
        ret="Firefox|"+ua[ua.length-1].split("/")[1];
    }
    else if(/MSIE/g.test(ua)){
        ua = ua.split(";");
        ret = "IE|"+ua[1].split(" ")[2];
    }
    else if(/Opera/g.test(ua)){
        ua = ua.split(" ");
        ret = "Opera|"+ua[ua.length-1].split("/")[1];
    }
    else if(/Chrome/g.test(ua)){
        ua = ua.split(" ");
        ret = "Chrome|"+ua[ua.length-2].split("/")[1];
    }
    else if(/^apple\s+/i.test(window.navigator.vendor)){
        ua = ua.split(" ");
        ret = "Safair|"+ua[ua.length-2].split("/")[1];
    }
    else{
        ret = "未知浏览器";
    }
    console.log('ret', ret);
    return ret.split("|");
}
var r = browser();
var frontend_type = r[0];
//var ip='192.168.160.176';
var ip = '127.0.0.1';
var port = ':8888';

function getAllCateFromHttp(getAllCateCb) {
//  var studentData = CollectionData();
    var ajax_url = '';
    console.log('frontend_type', frontend_type);
    console.log('frontend_local', frontend_local);
    if(frontend_type == frontend_local){
        ajax_url = 'http://' + ip + port + '/getAllCate';
    }else{
        ajax_url = '/getAllCate';
    }
    console.log('ajax_url', ajax_url);
  $.ajax({
    url: ajax_url,
    type: "post",
    contentType: "application/json;charset=utf-8",
    dataType: "json",
    data: '{"func":"getAllCate","arg":"null"}',
    success: function(result) {
      var cates = new Array();
      result.forEach(function (each){
        cates.push({
          id:each.id,
          type:each.type,
          path:each.path
        });
      });
      getAllCateCb(cates);
    },
    error: function(e) {
      getAllCateCb(e);
    }
  });
}

function getAllDataByCateFromHttp(getAllDataByCateCb,cate) {
//  var studentData = CollectionData();
    var ajax_url = '';
    if(frontend_type == frontend_local){
        ajax_url = 'http://' + ip + port + '/getAllDataByCate';
    }else{
        ajax_url = '/getAllDataByCate';
    }
  $.ajax({
    url: ajax_url,
    type: "post",
    contentType: "application/json;charset=utf-8",
    dataType: "json",
    data: '{"func":"getAllDataByCate","arg":"'+cate+'"}',
    success: function(result) {
      var cates = new Array();
      result.forEach(function (each){
        cates.push({
          id:each.id,
          filename:each.filename,
          postfix:each.postfix,
          path:each.path
        });
      });
      getAllDataByCateCb(cates);
    },
    error: function(e) {
      getAllDataByCateCb(e);
    }
  });
}
function getAllContactsFromHttp(getAllContactsCb) {
//  var studentData = CollectionData();
    var ajax_url = '';
    if(frontend_type == frontend_local){
        ajax_url = 'http://' + ip + port + '/getAllContacts';
    }else{
        ajax_url = '/getAllContacts';
    }
  $.ajax({
    url: ajax_url,
    type: "post",
    contentType: "application/json;charset=utf-8",
    dataType: "json",
    data: '{"func":"getAllContacts","arg":"null"}',
    success: function(result) {
      var contacts = new Array();
      result.forEach(function (each){
        contacts.push({
          id:each.id,
          name:each.name,
          photoPath:each.photoPath
        });
      });
      getAllContactsCb(contacts);
    },
    error: function(e) {
      getAllContactsCb(e);
    }
  });
}
//console.log('current path in folder_view.js:', process.cwd());
// Template engine
function gen_files_view(files){
    var results = [];
    for(var i=0; i<files.length; i++){
		var file = files[i];
        results.push('<div class="file" data-path="' + file['props'].path + '">');
        if(file['props'].img){
            if(frontend_type == frontend_local){ 
                results.push('<div class="icon"> <img src="' + file['props'].img + '"></div>');
            }else{
                results.push('<div class="icon"> <img src="' + file['props'].img + '?query=absolute"></div>');
            }
        }else{
            results.push('<div class="icon"> <img src="icons/' + file['props'].icon + '.png"></div>');
        }
        results.push('<div class="name">' + file['props'].name + '</div>');
        results.push('</div>');
    }
    return results.join('\n');
}

function gen_view_table(files){
    function get_json_key(data_json){
        var keys = [];
        for(var key in data_json){
            if(key == 'props')
                continue;
            keys.push(key);
        }
        return keys;
    }
    function gen_body_tr(data_json, keys){
	    var tr = $('<tr></tr>');
	    for(var i=0; i<keys.length; i++){
	        tr.append($('<th>' + data_json[keys[i]] + '</th>'))
	    }
	    return tr;
	}
	
    var keys = get_json_key(files[0]);
    //console.log('keys', keys);
    
    var thead = $('<thead></thead>');
	var tr = $('<tr></tr>');
	for(var i=0; i<keys.length; i++){
	    tr.append($('<th>' + keys[i] + '</th>'))
	}
	tr.addClass('success');
	thead.append(tr);
	    
    var tbody = $('<tbody></tbody>');
    for(var i=0; i<files.length; i++){
		tbody.append(gen_body_tr(files[i], keys));
	}
	    
	var table = $('<table></table>');
	table.append(thead);
	table.append(tbody);
	table.addClass('table');
	
    var div = $('<div></div>');
    div.addClass('panel panel-primary');
    div.append(table);
    
    return div;
/*
<div class="panel panel-primary">
      <table class="table">
        <thead>
          <tr class='success'>
            <th>#</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Username</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>1</td>
            <td>Mark</td>
            <td>Otto</td>
            <td>@mdo</td>
          </tr>
          <tr>
            <td>2</td>
            <td>Jacob</td>
            <td>Thornton</td>
            <td>@fat</td>
          </tr>
          <tr>
            <td>3</td>
            <td>Larry</td>
            <td>the Bird</td>
            <td>@twitter</td>
          </tr>
        </tbody>
      </table>
</div>
*/
}
function gen_popup_dialog(title, message){
    $("#popup_dialog").remove();

    var header_btn = $('<button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>');
    var header_title = $('<h4 class="modal-title"></h4>');
    header_title.text(title);
    var header = $('<div class="modal-header"></div>');
    header.append(header_btn).append(header_title);
    
    var body = $('<div class="modal-body"></div>');
    body.html(message);
    
    var footer = $('<div class="modal-footer"></div>');
    var footer_btn = $('<button type="button" class="btn btn-default" data-dismiss="modal">关闭</button>');
    footer.append(footer_btn);
    
    var content = $('<div class="modal-content"></div>');
    content.append(header);
    content.append(body);
    content.append(footer);
    
    var dialog = $('<div class="modal-dialog"></div>');
    dialog.append(content);
    var div = $('<div id="popup_dialog" class="modal fade"></div>');
    div.append(dialog);
    $('body').append(div);
    $("#popup_dialog").modal('show');
}
function cb_get_data_source_file(data_json){
    console.log('get data source file', data_json);
    if(!data_json['openmethod'] || !data_json['content']){
        window.alert('openmethod or content not found.');
        return false;
    }
    var method = data_json['openmethod'];
    var content = data_json['content'];
    
    var pos = content.lastIndexOf(".");
    var suffix = '';
    if(pos != -1){
        suffix = content.substr(pos+1).toLowerCase();
    }
    
    switch(method){
    case 'direct':
        var file_content ='';
        switch(suffix){
        case 'jpg':
            file_content = '<img src=' + content + '>';
            break;
        case 'txt':
            //var data = '';
            file_content = $("<p></p>").load(content);
            //console.log('*****************file_content', data);
//            if(frontend_type == frontend_local){ 
//                results.push('<div class="icon"> <img src="' + file['props'].img + '"></div>');
//            }else{
//                results.push('<div class="icon"> <img src="' + file['props'].img + '?query=absolute"></div>');
//            }
            break;
        case 'ogg':
            file_content = $('<audio controls></audio>');
            file_content.html('<source src="http://localhost:8888/home/v1/resources/musics/whoyouare.mp3?query=absolute" type="audio/mpeg">');
            break;
        default:
            break;
        }
        gen_popup_dialog('文件浏览', file_content);
    break;
    case 'local':
        break;
    case 'remote':
        break;
    }
    //{"openmethod":"local","content":"/home/cos/Templates/resources/documents/preseed\u5B9E\u73B0livecd\u81EA\u52A8\u5B89\u88C5.docx"}
}
function cb_get_all_data_file(data_json){
    console.log('get all data file', data_json);
    var file_propery='';
    for(var key in data_json){
        file_propery += '<p>' + key + ': ' + data_json[key] + '</p>';
    }
    gen_popup_dialog('属性', file_propery);
}
// Our type
function Folder(jquery_element) {
    events.EventEmitter.call(this);
    this.element = jquery_element;
    var self = this;
    this.element.parent().on('mousedown', function(e) {
        switch(e.which){
        case 3:
            var contents = ['创建文件夹', '创建文档', '排列项目', '属性'];
            //var contents = ['aaa', 'bbb', 'ccc', 'ddd'];
            var popup_menu = self.gen_popup_menu(contents);            
            var row = this;
            $(popup_menu).on('mouseup', function(e){
                console.log('right button for ', global_dir);
                for(var i=0; i<contents.length; i++){
                    if($(e.target).text() == contents[i]){
                        console.log('folder_view pop_menu ' + contents[i] + 'is clicked');
                    }                
                }
                $(this).remove();
                self.element.children('.focus').removeClass('focus');
                e.stopPropagation();  
            });
            self.element.append(popup_menu);  
            self.element.children('.dropdown-menu').css({
                'display':'block',
                'position': 'fixed',
                'left': (e.pageX) + 'px',
                'top': (e.pageY) + 'px'
            });
            break;
        case 1:
            self.element.children('.focus').removeClass('focus');
            self.element.children('.dropdown-menu').css({'display':'none'});
            break;
        }
        //e.stopPropagation();
    });
    
    this.element.delegate('.file', 'mousedown', function(e) {
        self.element.children('.focus').removeClass('focus');
        $(this).addClass('focus');
        switch(e.which){
        case 3:
            var contents = ['打开', '属性'];// '编辑', '删除',
            var popup_menu = self.gen_popup_menu(contents);
            var dst_file = this;
            $(popup_menu).on('mouseup', function(e){
//                for(var i=0; i<contents.length; i++){
//                    if($(e.target).text() == contents[i]){
//                        //console.log('destination file: '+ $(dst_file).attr('data-path') + ' pop_menu ' + contents[i] + 'is clicked');
//                    }                
//                }
                var file_json = self.find_json_by_path($(dst_file).attr('data-path'));
                if(!file_json){
                    window.alert('data-json was not found.');
                    return false;
                }
                switch($(e.target).text()){
                case '打开':
                    switch(file_json['props']['type']){
                    case 'folder':
                        self.emit('navigate', file_json);
                        break;
                    case 'file':
                        getDataSourceById(cb_get_data_source_file, file_json.id);
                        break;
                    }
                    break;
                case '属性':
                    switch(file_json['props']['type']){
                    case 'folder':
                        var data_json = file_json['props'];
                        var file_propery='';
                        for(var key in data_json){
                            file_propery += '<p>' + key + ': ' + data_json[key] + '</p>';
                        }
                        gen_popup_dialog('属性', file_propery);
                        break;
                    case 'file':
                        //console.log('id: ', file_json.id);
                        getDataById(cb_get_all_data_file, file_json.id);
                        break;
                    }
                    break;
                }
                $(this).remove();
                self.element.children('.focus').removeClass('focus');
                e.stopPropagation();  
            });

            self.element.append(popup_menu);
            self.element.children('.dropdown-menu').css({
                'display':'block',
                'position': 'fixed',
                'left': (e.pageX) + 'px',
                'top': (e.pageY) + 'px'
            });
            break;
        case 1:
            self.element.children('.dropdown-menu').css({'display':'none'});
            break;
        }
        e.stopPropagation();
    });
    // Double click on file
    this.element.delegate('.file', 'dblclick', function() {
        //var file_json = self.find_json_by_path($(this).attr('data-path'));        
        var file_json = self.find_json_by_path($(this).attr('data-path'));
        if(!file_json){
            window.alert('data-json was not found.');
            return false;
        }
        switch(file_json['props']['type']){
        case 'folder':
            self.emit('navigate', file_json);
            break;
        case 'file':
            getDataSourceById(cb_get_data_source_file, file_json.id);
            break;
        }
    });    
        
    $('#div-setting').css('background', 'none');
//    function change_value(){
//        console.log($("#div-setting #liststyle").slider("value"));
//    }
    $("#div-setting #liststyle").slider({
        orientation: "horizontal",
        min: 0,
        max: 30,
        range: "min",
        value:15,
        change: self.show_folder_view,
    });
}

util.inherits(Folder, events.EventEmitter);


Folder.prototype.gen_popup_menu = function(contents){
    this.element.children('.dropdown-menu').remove();
    var menu = $('<ul></ul>');
    $(menu).attr({
        'class':'dropdown-menu',
        'role':'menu',
        'aria-labelledby': 'dropdownMenu'
    });
    var items = [];
    for(var i=0; i<contents.length; i++){
        items.push('<li><a tabindex="-1" href="#">' + contents[i] + '</a></li>');
    }
    $(menu).html(items.join('\n'));
    
            $(menu).on('mousedown', function(e){
                e.stopPropagation();  
            });

    //<li class="divider"></li>
    return menu;
}
var global_self;
var global_dir;
var file_arch_json = {};
Folder.prototype.find_json_by_path = function(filepath){
    var all = file_arch_json[global_dir];
    //console.log('global_dir', global_dir);
    //console.log('filepath', filepath);
    //console.log('file_arch_json[global_dir]', file_arch_json[global_dir]);
    var file = false;
    if(all.length){
        for(var i=0; i<all.length; i++){
            if(all[i]['props'].path == filepath){
                file = all[i];
                break;
            }
        }
    }
    return file;
}
Folder.prototype.get_callback_data = function(data_json){
    console.log('data from server:', data_json);
    switch(global_dir){
    case 'root':
        for(var i=0; i<data_json.length; i++){
            data_json[i]['props'] = {};
            data_json[i]['props']['path'] = 'root/'+data_json[i]['type'];
            data_json[i]['props']['name'] = data_json[i]['type'];
            data_json[i]['props']['type'] = 'folder';
            data_json[i]['props']['icon'] = 'folder';
        }   
        global_self.emit('folder_set_favorites', data_json);
        break;
    case 'root/Contacts':
        for(var i=0; i<data_json.length; i++){
            data_json[i]['props'] = {};
            //data_json[i]['img'] = data_json[i]['photoPath'];
            data_json[i]['props']['path'] = 'root/Contacts/'+data_json[i]['name'];
            data_json[i]['props']['name'] = data_json[i]['name'];
            data_json[i]['props']['type'] = 'file';
            data_json[i]['props']['icon'] = 'Contacts';
        }
        break;
    case 'root/Pictures':
        for(var i=0; i<data_json.length; i++){
            data_json[i]['props'] = {};
            data_json[i]['props']['img'] = data_json[i]['path'];
            data_json[i]['props']['path'] = 'root/Pictures/'+data_json[i]['filename'];
            data_json[i]['props']['name'] = data_json[i]['filename'];      
            data_json[i]['props']['type'] = 'file';
            data_json[i]['props']['icon'] = 'Pictures';
        }
        break;
     case 'root/Videos':
        for(var i=0; i<data_json.length; i++){
            data_json[i]['props'] = {};
            data_json[i]['props']['path'] = 'root/Videos/'+data_json[i]['filename'];
            data_json[i]['props']['name'] = data_json[i]['filename'];
            //data_json[i]['img'] = '.'+data_json[i]['photoPath'];            
            data_json[i]['props']['type'] = 'file';
            data_json[i]['props']['icon'] = 'Videos';
        }
        break;
    case 'root/Documents':
        for(var i=0; i<data_json.length; i++){
            data_json[i]['props'] = {};
            //data_json[i]['img'] = '.'+data_json[i]['photoPath'];         
            data_json[i]['props']['path'] = 'root/Documents/'+data_json[i]['filename'];
            data_json[i]['props']['name'] = data_json[i]['filename'];   
            data_json[i]['props']['type'] = 'file';
            data_json[i]['props']['icon'] = 'Documents';
        }
        break;
    case 'root/Music':
        for(var i=0; i<data_json.length; i++){
            data_json[i]['props'] = {};
            data_json[i]['props']['path'] = 'root/Music/'+data_json[i]['filename'];
            data_json[i]['props']['name'] = data_json[i]['filename'];
            //data_json[i]['img'] = '.'+data_json[i]['photoPath'];            
            data_json[i]['props']['type'] = 'file';
            data_json[i]['props']['icon'] = 'Music';
        }
        break;
    default:
        break;
    }
    global_self.emit('folder_set_sidebar', data_json);
    file_arch_json[global_dir] = data_json;
    //console.log('data from server after treat:', data_json);
    global_self.show_folder_view(global_dir);
}
Folder.prototype.show_folder_view = function() {
    //console.log('in show folder view, global dir:', get_settings('liststyle'));
    data_json = file_arch_json[global_dir];
    global_self.element.children().remove();

    switch(get_settings('liststyle')){
        case 0:
            global_self.element.append(gen_view_table(data_json));
            break;
        case 1:
            global_self.element.html(gen_files_view(data_json));
            break;
        default:
            global_self.element.html(gen_files_view(data_json));
            break;
    }
}

function get_settings(set){
    switch(set){
    case 'liststyle':
        var liststyle = $("#div-setting #liststyle").slider("value") / 10;
        liststyle = parseInt(liststyle);
        return liststyle;
        //break;
    }
}

Folder.prototype.open = function(dir) {
    global_self = this;
    global_dir = dir;
    console.log('global_dir', global_dir);
    switch(global_dir){
    case 'root':
        getAllCateFromHttp(this.get_callback_data);
        //netcomm.getAllCateFromLocal(this.get_callback_data);
        break;
    case 'root/Contacts':
        getAllContactsFromHttp(this.get_callback_data);
        //netcomm.getAllContactsFromLocal(this.get_callback_data);
        break;
    case 'root/Pictures':
        getAllDataByCateFromHttp(this.get_callback_data, 'Pictures');
        //netcomm.getAllDataByCateFromLocal(this.get_callback_data, 'Pictures');
        break;
    case 'root/Videos':
        getAllDataByCateFromHttp(this.get_callback_data, 'Videos');
        //netcomm.getAllDataByCateFromLocal(this.get_callback_data, 'Videos');
        break;
    case 'root/Documents':
        getAllDataByCateFromHttp(this.get_callback_data, 'Documents');
        //netcomm.getAllDataByCateFromLocal(this.get_callback_data, 'Videos');
        break;
    case 'root/Music':
        getAllDataByCateFromHttp(this.get_callback_data, 'Music');
        //netcomm.getAllDataByCateFromLocal(this.get_callback_data, 'Videos');
        break;
    default:
        window.alert('Path ' + global_dir + ' does not exist.');
        break;
    }
}

//exports.Folder = Folder;
//data from server:
//root:
//[{"id":"0#101","type":"Contacts","path":"./resources/logo/contacts.png"},{"id":"0#102","type":"Pictures","path":"./resources/logo/pictures.png"},{"id":"0#103","type":"Videos","path":"./resources/logo/videos.png"}]
//Contact:
//[{"id":"1#1","name":"Lily","photoPath":"./resources/contacts/boy.jpg"},{"id":"1#2","name":"zhang","photoPath":"./resources/contacts/city3.jpg"},{"id":"1#3","name":"wang","photoPath":"./resources/contacts/girl1.jpg"},{"id":"1#4","name":"li","photoPath":"./resources/contacts/girl2.jpg"},{"id":"1#5","name":"zhao","photoPath":"./resources/contacts/girl3.jpg"},{"id":"1#13","name":"zhang","photoPath":"./resource/photo/test.jpg"},{"id":"1#1000014","name":"zhang","photoPath":"./resource/photo/test.jpg"}]
//Pictures
// [{"id":"2#1","filename":"jianmin","postfix":"jpg","path":"/home/v1/demo-rio/nodewebkit/resources/contactsphoto/jianmin.jpg"},{"id":"2#2","filename":"wangyu","postfix":"jpg","path":"/home/v1/demo-rio/nodewebkit/resources/contactsphoto/wangyu.jpg"},{"id":"2#3","filename":"xifei","postfix":"jpg","path":"/home/v1/demo-rio/nodewebkit/resources/contactsphoto/xifei.jpg"},{"id":"2#4","filename":"yuanzhe","postfix":"jpg","path":"/home/v1/demo-rio/nodewebkit/resources/contactsphoto/yuanzhe.jpg"},{"id":"2#5","filename":"contacts","postfix":"png","path":"/home/v1/demo-rio/nodewebkit/resources/logo/contacts.png"},{"id":"2#6","filename":"pictures","postfix":"png","path":"/home/v1/demo-rio/nodewebkit/resources/logo/pictures.png"},{"id":"2#7","filename":"city1","postfix":"jpg","path":"/home/v1/demo-rio/nodewebkit/resources/pictures/city1.jpg"},{"id":"2#8","filename":"city4","postfix":"jpg","path":"/home/v1/demo-rio/nodewebkit/resources/pictures/city4.jpg"},{"id":"2#9","filename":"city3","postfix":"jpg","path":"/home/v1/demo-rio/nodewebkit/resources/pictures/city3.jpg"},{"id":"2#10","filename":"city2","postfix":"jpg","path":"/home/v1/demo-rio/nodewebkit/resources/pictures/city2.jpg"},{"id":"2#11","filename":"girl2","postfix":"jpg","path":"/home/v1/demo-rio/nodewebkit/resources/pictures/girl2.jpg"},{"id":"2#12","filename":"girl3","postfix":"jpg","path":"/home/v1/demo-rio/nodewebkit/resources/pictures/girl3.jpg"},{"id":"2#13","filename":"vessel1","postfix":"jpg","path":"/home/v1/demo-rio/nodewebkit/resources/pictures/vessel1.jpg"},{"id":"2#14","filename":"Penguins","postfix":"jpg","path":"/home/v1/demo-rio/nodewebkit/resources/pictures/Penguins.jpg"},{"id":"2#15","filename":"city5","postfix":"jpg","path":"/home/v1/demo-rio/nodewebkit/resources/pictures/city5.jpg"},{"id":"2#16","filename":"wangtan","postfix":"jpg","path":"/home/v1/demo-rio/nodewebkit/resources/contactsphoto/wangtan.jpg"},{"id":"2#17","filename":"wuxiang","postfix":"jpg","path":"/home/v1/demo-rio/nodewebkit/resources/contactsphoto/wuxiang.jpg"},{"id":"2#18","filename":"boy","postfix":"jpg","path":"/home/v1/demo-rio/nodewebkit/resources/pictures/boy.jpg"},{"id":"2#19","filename":"cat","postfix":"jpg","path":"/home/v1/demo-rio/nodewebkit/resources/pictures/cat.jpg"},{"id":"2#20","filename":"videos","postfix":"png","path":"/home/v1/demo-rio/nodewebkit/resources/logo/videos.png"},{"id":"2#21","filename":"vessel2","postfix":"jpg","path":"/home/v1/demo-rio/nodewebkit/resources/pictures/vessel2.jpg"},{"id":"2#22","filename":"wangfeng","postfix":"jpg","path":"/home/v1/demo-rio/nodewebkit/resources/contactsphoto/wangfeng.jpg"},{"id":"2#23","filename":"girl1","postfix":"jpg","path":"/home/v1/demo-rio/nodewebkit/resources/pictures/girl1.jpg"}]
//Videos
//[{"id":"3#1","filename":null,"postfix":"flv","path":"./resources/videos/test1.flv"},{"id":"3#2","filename":null,"postfix":"flv","path":"./resources/videos/test2.flv"},{"id":"3#3","filename":null,"postfix":"flv","path":"./resources/videos/test3.flv"},{"id":"3#4","filename":null,"postfix":"hlv","path":"./resources/videos/test4.hlv"},{"id":"3#10000005","filename":null,"postfix":"hlv","path":"./resources/videos/test5.hlv"}]
/*
    files = [
            {
                "name" : "bootstrap",
                "path" : "/home/cos/Templates/node-webkit-v0.9.2-linux-ia32_and_example/file-explorer/bootstrap",
				"type" : "folder"
			},
			{
				"name" : "bundle.js",
				"path" : "/home/cos/Templates/node-webkit-v0.9.2-linux-ia32_and_example/file-explorer/bundle.js",
				"type" : "blank"
			},
			{
				"name" : "icons",
				"path" : "/home/cos/Templates/node-webkit-v0.9.2-linux-ia32_and_example/file-explorer/icons",
				"type" : "folder"
			},
			{
				"name" : "images",
				"path" : "/home/cos/Templates/node-webkit-v0.9.2-linux-ia32_and_example/file-explorer/images",
				"type" : "folder"
			},
			{
				"name" : "index.html",
				"path" : "/home/cos/Templates/node-webkit-v0.9.2-linux-ia32_and_example/file-explorer/index.html",
				"type" : "html"
			},
			{
				"name" : "js",
				"path" : "/home/cos/Templates/node-webkit-v0.9.2-linux-ia32_and_example/file-explorer/js",
				"type" : "folder"
			},
			{
				"name" : "main.js",
				"path" : "/home/cos/Templates/node-webkit-v0.9.2-linux-ia32_and_example/file-explorer/main.js",
				"type" : "blank"
			},
			{
				"name" : "node_modules",
				"path" : "/home/cos/Templates/node-webkit-v0.9.2-linux-ia32_and_example/file-explorer/node_modules",
				"type" : "folder"
			},
			{
				"name" : "package.json",
				"path" : "/home/cos/Templates/node-webkit-v0.9.2-linux-ia32_and_example/file-explorer/package.json",
				"type" : "blank"
			},
			{
				"name" : "README.md",
				"path" : "/home/cos/Templates/node-webkit-v0.9.2-linux-ia32_and_example/file-explorer/README.md",
				"type" : "text"
			},
			{
				"name" : "style.css",
				"path" : "/home/cos/Templates/node-webkit-v0.9.2-linux-ia32_and_example/file-explorer/style.css",
				"type" : "css"
			} ];
*/
